# –°–∏—Å—Ç–µ–º–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import base64  # –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è VMESS –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ base64
import os  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
import socket  # –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ–º–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω –≤ IP
import sys  # –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Ä–∞–±–æ—Ç—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
import time  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –∏ –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
from datetime import datetime, timedelta  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏

# –°–µ—Ç–µ–≤—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ HTTP-–∑–∞–ø—Ä–æ—Å—ã
import requests  # –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ IP

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
import json  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON-–¥–∞–Ω–Ω—ã–º–∏
import re  # –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —É–ª—É—á—à–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
import colorama  # –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ —É–¥–æ–±—Å—Ç–≤–∞
from colorama import Fore, Style
import pyperclip  # –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞

colorama.init(autoreset=True)

API_URL = "http://ip-api.com/json/"
MAX_REQUESTS_PER_MINUTE = 45
TIME_DELAY = 60  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
TIME_FILE = "last_check_time.txt"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
CACHE_FILE = "processed_profiles.txt"  # –ö–µ—à-—Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π

def extract_profiles(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞."""
    with open(file_path, 'r', encoding='utf-8') as f:
        return f.readlines()

def decode_vmess(vmess_profile):
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç VMESS –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ base64."""
    try:
        decoded = base64.b64decode(vmess_profile[8:]).decode('utf-8')
        return json.loads(decoded)
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ VMESS –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return None

def encode_vmess(vmess_data):
    """–ö–æ–¥–∏—Ä—É–µ—Ç VMESS –ø—Ä–æ—Ñ–∏–ª—å –æ–±—Ä–∞—Ç–Ω–æ –≤ base64."""
    try:
        json_str = json.dumps(vmess_data, ensure_ascii=False)
        encoded = base64.b64encode(json_str.encode('utf-8')).decode('utf-8')
        return f"vmess://{encoded}"
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ VMESS –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return None

def extract_ip_from_profile(profile):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è."""
    if profile.startswith("vmess://"):
        vmess_data = decode_vmess(profile)
        if vmess_data and "add" in vmess_data:
            return vmess_data["add"]
    else:
        ip_or_domain_match = re.search(r'((?:\d{1,3}\.){3}\d{1,3}|[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})', profile)
        if ip_or_domain_match:
            return ip_or_domain_match.group(0)
    return None

def resolve_domain_to_ip(domain):
    """–†–∞–∑—Ä–µ—à–∞–µ—Ç –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –≤ IP-–∞–¥—Ä–µ—Å."""
    try:
        return socket.gethostbyname(domain)
    except socket.gaierror:
        print(f"{Fore.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ–º–µ–Ω: {domain}")
        return None

def get_location(ip):
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ IP —á–µ—Ä–µ–∑ API."""
    url = f"{API_URL}{ip}"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get("status") == "success":
                return f"{data['country']}, {data['regionName']}, {data['city']}"
            elif data.get("status") == "fail" and data.get("message") == "quota":
                # –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                return "RATE_LIMIT_EXCEEDED"
            else:
                return "Unknown, Unknown, Unknown"
        else:
            return "Unknown, Unknown, Unknown"
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return "Unknown, Unknown, Unknown"

def cooldown(seconds):
    """–û—Ç—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏, –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ 'P'."""
    print(f"{Fore.YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π...")
    print("–ï—Å–ª–∏ –≤—ã —Å–º–µ–Ω–∏–ª–∏ IP –∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ 'P'.")
    start_time = time.time()
    try:
        if os.name == 'nt':
            import msvcrt
            while True:
                remaining = int(seconds - (time.time() - start_time))
                if remaining <= 0:
                    break
                print(f"{remaining}/{seconds} —Å–µ–∫—É–Ω–¥", end='\r')
                time.sleep(1)
                if msvcrt.kbhit():
                    key = msvcrt.getch()
                    if key.lower() == b'p':
                        print(f"{Fore.GREEN}‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                        break
        else:
            import select
            import sys
            while True:
                remaining = int(seconds - (time.time() - start_time))
                if remaining <= 0:
                    break
                print(f"{remaining}/{seconds} —Å–µ–∫—É–Ω–¥", end='\r')
                time.sleep(1)
                dr, dw, de = select.select([sys.stdin], [], [], 0)
                if dr:
                    user_input = sys.stdin.readline().strip()
                    if user_input.lower() == 'p':
                        print(f"{Fore.GREEN}‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                        break
    except ImportError:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        for remaining in range(seconds, 0, -1):
            print(f"{remaining}/{seconds} —Å–µ–∫—É–Ω–¥", end='\r')
            time.sleep(1)
    print()

def check_last_request_time():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–ª–æ –ª–∏ 60 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    if os.path.exists(TIME_FILE):
        with open(TIME_FILE, 'r') as f:
            last_check_str = f.read().strip()
        try:
            last_check_time = datetime.strptime(last_check_str, "%Y-%m-%d %H:%M:%S")
            current_time = datetime.now()
            time_difference = current_time - last_check_time
            if time_difference < timedelta(seconds=TIME_DELAY):
                remaining_time = TIME_DELAY - time_difference.seconds
                print(f"{Fore.YELLOW}‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ {remaining_time} —Å–µ–∫—É–Ω–¥.")
                sys.exit(1)
        except ValueError:
            print(f"{Fore.RED}‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–∞–π–ª–µ last_check_time.txt. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    else:
        print(f"{Fore.YELLOW}‚ö†Ô∏è –§–∞–π–ª last_check_time.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...")

def update_last_request_time():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(TIME_FILE, 'w') as f:
        f.write(current_time)

def process_profiles(profiles):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç IP –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏."""
    total_profiles = len(profiles)
    processed_profiles = []
    batch = []

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
    processed_ips = set()
    if os.path.exists(CACHE_FILE):
        with open(CACHE_FILE, 'r', encoding='utf-8') as f:
            processed_profiles = f.read().splitlines()
            for profile in processed_profiles:
                ip = extract_ip_from_profile(profile)
                if ip:
                    processed_ips.add(ip)

    check_last_request_time()

    for index, profile in enumerate(profiles):
        ip_or_domain = extract_ip_from_profile(profile)
        if not ip_or_domain:
            print(f"{Fore.RED}‚ùå IP –∏–ª–∏ –¥–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ {index + 1}, –ø—Ä–æ–ø—É—Å–∫...")
            continue

        # –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–º–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤ IP
        if not re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', ip_or_domain):
            print(f"{Fore.YELLOW}üåê –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ–º–µ–Ω: {ip_or_domain}")
            ip_or_domain_resolved = resolve_domain_to_ip(ip_or_domain)
            if not ip_or_domain_resolved:
                print(f"{Fore.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ–º–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ {index + 1}, –ø—Ä–æ–ø—É—Å–∫...")
                continue
            ip_or_domain = ip_or_domain_resolved

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç IP —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if ip_or_domain in processed_ips:
            print(f"{Fore.CYAN}‚ÑπÔ∏è IP {ip_or_domain} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫...")
            continue

        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ IP: {ip_or_domain} (—Å—Ç—Ä–æ–∫–∞ {index + 1}/{total_profiles})")
        batch.append({'ip': ip_or_domain, 'profile': profile.strip()})

        if len(batch) == MAX_REQUESTS_PER_MINUTE:
            print(f"{Fore.YELLOW}üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ –∏–∑ {MAX_REQUESTS_PER_MINUTE} –∑–∞–ø—Ä–æ—Å–æ–≤...")
            process_batch(batch, processed_profiles, processed_ips)
            batch.clear()
            cooldown(TIME_DELAY)

    if batch:
        print(f"{Fore.YELLOW}üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞–∫–µ—Ç–∞ –∏–∑ {len(batch)} –∑–∞–ø—Ä–æ—Å–æ–≤...")
        process_batch(batch, processed_profiles, processed_ips)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ –∫–µ—à-—Ñ–∞–π–ª
    with open(CACHE_FILE, 'w', encoding='utf-8') as f:
        f.write('\n'.join(processed_profiles))

    print(f"{Fore.GREEN}‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ '{CACHE_FILE}'.")
    update_last_request_time()
    return processed_profiles

def process_batch(batch, processed_profiles, processed_ips):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π."""
    ips_in_batch = [item['ip'] for item in batch]
    batch_results = process_ip_batch(ips_in_batch)
    for item in batch:
        ip = item['ip']
        location = batch_results[ip]
        new_name = f"{location}, {ip}"

        profile = item['profile']

        if profile.startswith("vmess://"):
            vmess_data = decode_vmess(profile)
            if vmess_data:
                vmess_data["ps"] = new_name
                updated_profile = encode_vmess(vmess_data)
            else:
                updated_profile = profile
        else:
            updated_profile = re.sub(r'#.*$', f'#{new_name}', profile)

        processed_profiles.append(updated_profile)
        processed_ips.add(ip)

def process_ip_batch(ips):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –∏–∑ IP-–∞–¥—Ä–µ—Å–æ–≤."""
    results = {}
    while True:
        rate_limit_exceeded = False
        for ip in ips:
            location = get_location(ip)
            if location == "RATE_LIMIT_EXCEEDED":
                rate_limit_exceeded = True
                break
            results[ip] = location
        if rate_limit_exceeded:
            print(f"{Fore.RED}‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...")
            cooldown(TIME_DELAY)
            update_last_request_time()
            continue  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–∞–∫–µ—Ç –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
        else:
            break  # –ü–∞–∫–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ
    return results

def update_profiles(processed_profiles):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏."""
    with open('updated_profiles.txt', 'w', encoding='utf-8') as f:
        f.write('\n'.join(processed_profiles))

    print(f"{Fore.GREEN}‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'updated_profiles.txt'.")

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    print("\n–•–æ—Ç–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞?")
    print("1. –î–∞")
    print("2. –ù–µ—Ç")
    copy_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è (1 –∏–ª–∏ 2): ").strip()
    if copy_choice == '1':
        pyperclip.copy('\n'.join(processed_profiles))
        print(f"{Fore.GREEN}‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.")
    else:
        print(f"{Fore.YELLOW}‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.")

def main():
    print(f"{Fore.CYAN}üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π V2Ray...")
    profiles_path = "profiles.txt"

    if not os.path.isfile(profiles_path):
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª '{profiles_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        sys.exit(1)

    profiles = extract_profiles(profiles_path)
    processed_profiles = process_profiles(profiles)

    # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
    update_profiles(processed_profiles)

if __name__ == "__main__":
    main()